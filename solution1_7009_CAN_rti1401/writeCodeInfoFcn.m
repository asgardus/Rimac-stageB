% Autogenerated file: Tue Jun 19 13:11:38 2018
function writeCodeInfoFcn


% Load a ComponentInterface object from IR
codeIRInfoStruct = load('C:\Users\Dell\Documents\GitHub\Rimac-stageB\solution1_7009_CAN_rti1401\tlc\codeIRInfo.mat');
codeInfo = codeIRInfoStruct.codeInfo;




skippedParameters = [];

                
% Built-In Type: 0
Type_0_R0_V0 = coder.types.Double;
  Type_0_R0_V0.Name = 'double';
  Type_0_R0_V0.Identifier = 'real_T';
  Type_0_R0_V0.ReadOnly   = 0;
  Type_0_R0_V0.Volatile   = 0;
    
  % Matrix Type
  Type_28_R0_V0 = coder.types.Matrix;
  Type_28_R0_V0.BaseType   = Type_0_R0_V0;
    Type_28_R0_V0.Dimensions = [1, 1];
    







  tmpParams = [];
if ~isempty(tmpParams)
codeInfo.Parameters = [codeInfo.Parameters, tmpParams'];
end

    tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = coder.types.Argument.empty;
tmpActualReturn = RTW.DataInterface.empty;
  

  Initialize_Prototype = coder.types.Prototype;
  Initialize_Prototype.Arguments  = tmpArgs;
  Initialize_Prototype.Return     = tmpRet;
    Initialize_Prototype.HeaderFile = ['solution1_7009_CAN', '.h'];
  Initialize_Prototype.SourceFile = ['solution1_7009_CAN', '.c'];

  Initialize_Interface = RTW.FunctionInterface;
  Initialize_Interface.Prototype    = Initialize_Prototype;
  Initialize_Interface.ActualArgs   = tmpActualArgs;
  Initialize_Interface.ActualReturn = tmpActualReturn;

      Initialize_Prototype.Name = 'solution1_7009_CAN_initialize';
  time_constant = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, -1));
      Initialize_Interface.Timing = time_constant;
      codeInfo.InitializeFunctions =  [codeInfo.InitializeFunctions, Initialize_Interface'];

          tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = coder.types.Argument.empty;
tmpActualReturn = RTW.DataInterface.empty;
        

  

  

  Output_Prototype = coder.types.Prototype;
  Output_Prototype.Arguments  = tmpArgs;
  Output_Prototype.Return     = tmpRet;
    Output_Prototype.HeaderFile = ['solution1_7009_CAN', '.h'];
  Output_Prototype.SourceFile = ['solution1_7009_CAN', '.c'];

  Output_Interface = RTW.FunctionInterface;
  Output_Interface.Prototype    = Output_Prototype;
  Output_Interface.ActualArgs   = tmpActualArgs;
  Output_Interface.ActualReturn = tmpActualReturn;

  time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
      Output_Interface.Timing = time_0;
        Output_Prototype.Name = ['solution1_7009_CAN_output', ''];
      codeInfo.OutputFunctions =  [codeInfo.OutputFunctions, Output_Interface'];

          tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = coder.types.Argument.empty;
tmpActualReturn = RTW.DataInterface.empty;
        

  

  

  RootUpdate_Prototype = coder.types.Prototype;
  RootUpdate_Prototype.Arguments  = tmpArgs;
  RootUpdate_Prototype.Return     = tmpRet;
    RootUpdate_Prototype.HeaderFile = ['solution1_7009_CAN', '.h'];
  RootUpdate_Prototype.SourceFile = ['solution1_7009_CAN', '.c'];

  RootUpdate_Interface = RTW.FunctionInterface;
  RootUpdate_Interface.Prototype    = RootUpdate_Prototype;
  RootUpdate_Interface.ActualArgs   = tmpActualArgs;
  RootUpdate_Interface.ActualReturn = tmpActualReturn;

  time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
      RootUpdate_Interface.Timing = time_0;
        RootUpdate_Prototype.Name = ['solution1_7009_CAN_update', ''];
      codeInfo.UpdateFunctions =  [codeInfo.UpdateFunctions, RootUpdate_Interface'];

          
         
    
      
      tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = coder.types.Argument.empty;
tmpActualReturn = RTW.DataInterface.empty;
  

  Terminate_Prototype = coder.types.Prototype;
  Terminate_Prototype.Arguments  = tmpArgs;
  Terminate_Prototype.Return     = tmpRet;
    Terminate_Prototype.HeaderFile = ['solution1_7009_CAN', '.h'];
  Terminate_Prototype.SourceFile = ['solution1_7009_CAN', '.c'];

  Terminate_Interface = RTW.FunctionInterface;
  Terminate_Interface.Prototype    = Terminate_Prototype;
  Terminate_Interface.ActualArgs   = tmpActualArgs;
  Terminate_Interface.ActualReturn = tmpActualReturn;

  time_constant = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, -1));
      Terminate_Interface.Timing = time_constant;
            Terminate_Prototype.Name = ['solution1_7009_CAN_terminate'];
      codeInfo.TerminateFunctions =  [codeInfo.TerminateFunctions, Terminate_Interface'];


  



if ~isempty(skippedParameters)
codeInfo.Parameters(skippedParameters) = [];
end


% Handling Right-Click Builds
ss = rtwprivate('getSourceSubsystemHandle',codeInfo.GraphicalPath);
% Check if Rt-Click build, then re-map SIDs
if ~isempty(ss) && rtwprivate('rtwattic','hasSIDMap')
   codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo);
end

  lookupTableArray = [];         
  if exist('expInports', 'var')
    save codeInfo.mat codeInfo expInports lookupTableArray;
  else
    save codeInfo.mat codeInfo lookupTableArray;
  end
returnVal = 1;

% End Function: writeCodeInfoFcn

function data = uniquifyDataAccess(list)
  data = RTW.DataInterface.empty;
  for idx=1:numel(list)
      if ~isPresentDI(data, list(idx))
          data(end+1) = list(idx); %#ok<AGROW>
      end
  end
% End Function: uniquifyDataAccess
        
function isPresent = isPresentDI(list, di)
  isPresent = false;
  for idx = 1:numel(list)
    if isequal(list(idx), di)
      isPresent = true;
      break
    end
  end

function idx = getIndexFromTimingInternalId(internalIdVec, internalId)
 idx = find(internalIdVec == internalId);
 if (isempty(idx) || (length(idx) > 1))
    ciMsg = 'Time object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getIndexFromTimingInternalId

function checkDataGraphicalNames(ciName, rtwName)
  if (strcmp(ciName, rtwName) ~= 1)
    ciMsg = ['Name mismatch: ', ciName, ' and ', rtwName]; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: checkDataGraphicalNames

function iData = getInternalDataByName(iDataVec, iDataName)
 iData = RTW.DataInterface.empty;
 for idxData = 1:numel(iDataVec)
    if strcmp(iDataName, iDataVec(idxData).GraphicalName)
       iData(end+1) = iDataVec(idxData);
       break
    end
 end
 if (isempty(iData) || (length(iData) > 1))
    ciMsg = 'Internal Data object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getInternalDataByName

function iData = getInternalDataByVariableName(iDataVec, iDataVariableName)
 iData = RTW.DataInterface.empty;
 for idxData = 1:numel(iDataVec)
    if strcmp(iDataVariableName, iDataVec(idxData).Implementation.VariableName)
       iData = iDataVec(idxData);
       break
    end
 end
 if isempty(iData)
    ciMsg = 'Internal Data object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getInternalDataByVariableName

function paramIndex = getParamIndexFromGraphicalName(iParamVec, graphicalName)
  paramIndex = [];
  for idxData = 1:numel(iParamVec)
    if strcmp(graphicalName, iParamVec(idxData).GraphicalName)
       paramIndex = idxData;
       break
    end
  end
% End Function: getParamIndexFromGraphicalName

function codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo)
    
% Extract Subsystem Build Map from AtticData
    Subsystem_Build_Mapping = rtwprivate('rtwattic','getSIDMap');

% Parameters
    for i = 1:length(codeInfo.Parameters)
        sid = codeInfo.Parameters(i).SID;        

        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Parameters(i).SID = sid;        
    end
    
% Data Stores
     for i = 1:length(codeInfo.DataStores)
         sid = codeInfo.DataStores(i).SID;         

         sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
         codeInfo.DataStores(i).SID = sid;
     end
    
% Inports
    for i = 1:length(codeInfo.Inports)
        sid = codeInfo.Inports(i).SID;
        
        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Inports(i).SID = sid;
    end
    
% Outports
    for i = 1:length(codeInfo.Outports)
        sid = codeInfo.Outports(i).SID;
 
        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Outports(i).SID = sid;
    end    
   
